<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>424</y>
      <w>208</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>AdministratorCMD
File: administratorCMD.py
--
_print_welcome()
do_exit(line::string)
do_datasource(line::string)
do_list(line::string)
do_add_employee(line::string)
do_read_csv_file(line::string)
do_update_employee(line::string)
do_delete_employee(line::string)
do_get_info(line::string)
do_get_statistic(line::string)
cmdloop(args::string[])
--
offers command line interface to
user to access all implemented
features of the program</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>144</y>
      <w>208</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>&lt;&lt;AdministratorAbstract&gt;&gt;
File: administratorAbstract.py
--
/stdErr(string)/
/stdOut(string)/
--
defines interfact to be implemented
by all Administrator classes</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>696</x>
      <y>240</y>
      <w>24</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>824</x>
      <y>224</y>
      <w>96</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>cmd.CMD
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>696</x>
      <y>240</y>
      <w>184</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>210.0;10.0;210.0;40.0;10.0;40.0;10.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>216</x>
      <y>424</y>
      <w>224</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>starter.py
--
start()
--
entry point to the project;
reads system arguments
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>432</x>
      <y>440</y>
      <w>184</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;..
starts
administrator.start()</panel_attributes>
    <additional_attributes>210.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>216</x>
      <y>248</y>
      <w>224</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>IOHelper.py
--
initialize(target::AdministratorAbstract)
stdErr(message::string)
stdOut(message::string)
--
entry point to the project;
reads system arguments
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>304</x>
      <y>352</y>
      <w>72</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;..
initializes</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>432</x>
      <y>240</y>
      <w>200</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
stores
forwards messages</panel_attributes>
    <additional_attributes>10.0;40.0;230.0;40.0;230.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>968</x>
      <y>424</y>
      <w>336</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>dataHandlerFacade.py
--
get_all_employees(source::string)
get_employee(emp_id::string, source::string)
employee_exists(emp_id::string, source::string)
save_employees(employees::Employee[], source::string)
save_employee(employee::Employee, source::string)
update_employee(employee::Employee, source::string)
delete_employees(employee_ids::string[], source::string)
get_statistic(statistic::string, group::string, source::string)
--
acts as a facade to several implementations of
DataHandlerAbstract interface</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>800</x>
      <y>440</y>
      <w>184</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;..
uses for data IO</panel_attributes>
    <additional_attributes>210.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>968</x>
      <y>632</y>
      <w>336</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>&lt;&lt;DataHandlerAbstract&gt;&gt;
File: dataHandlerAbstract.py
--
/get_all_employees():Employee[]/
/save_employees(employees::Employee[])/
/update_employee(employee::Employee)/
/delete_employees(emp_ids::string[])/
get_statistic(statistic::string, group::string):{}
_get_statistic_default(statistic::string, group::string):{}
save_employee(employee::Employee)
get_employe(emp_id::string):Employee
employee_exists(emp_id::string):boolean
delete_employee(employee:Employee)
--
defines interface to be implemented by all DataHandler
classes</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>568</y>
      <w>96</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>abc.ABCMeta
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>872</x>
      <y>584</y>
      <w>160</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
metaclass</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0;180.0;40.0;180.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1008</x>
      <y>872</y>
      <w>336</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>DataHandlerFile
File: dataHandlerFile.py
--
get_all_employees():Employee[]
save_employees(employees::Employee[])
update_employee(employee::Employee)
delete_employees(emp_ids::string[])
--
IO to save/ read employees to/ from .csv files</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>976</x>
      <y>824</y>
      <w>48</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;180.0;40.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1008</x>
      <y>1000</y>
      <w>336</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>DataHandlerDatabase
File: dataHandlerDatbase.py
--
get_all_employees():Employee[]
save_employees(employees::Employee[])
update_employee(employee::Employee)
delete_employees(emp_ids::string[])
--
IO to save/ read employees to/ from mySQL databases</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1008</x>
      <y>1128</y>
      <w>336</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>DataHandlerSerial
File: dataHandlerSerial.py
--
get_all_employees():Employee[]
save_employees(employees::Employee[])
update_employee(employee::Employee)
delete_employees(emp_ids::string[])
--
IO to save/ read employees to/ from pickle binary files</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>976</x>
      <y>824</y>
      <w>48</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;340.0;40.0;340.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>976</x>
      <y>824</y>
      <w>48</w>
      <h>416</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;500.0;40.0;500.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>880</y>
      <w>208</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>Person
File: employee.py
--
- gender::string
- bmi::string
- birthday::datetime.date
- age::int
--
get_birthday_string():string
--
- base class to describe a person</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>1048</y>
      <w>208</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>Employee
File: employee.py
--
- employee_id::string
- sales::int
- salary:: int
--
equals(other::Employee):boolean
get_csv_line():string
--
- describes an employee</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>680</x>
      <y>1000</y>
      <w>24</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>560</x>
      <y>552</y>
      <w>136</w>
      <h>536</h>
    </coordinates>
    <panel_attributes>lt=&lt;..
creates and displays</panel_attributes>
    <additional_attributes>50.0;650.0;10.0;650.0;10.0;10.0;50.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>200</x>
      <y>576</y>
      <w>328</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>inputConverter.py
--
convert_input(input::string, input_type::string):var
convert_employee_id(emp_id::string):string
convert_gender(gender::string):string
convert_age(age::string):int
convert_bmi(bmi::string):string
convert_sales(sales::string):int
convert_salary(salary::string):int
convert_birthday(birthday::string):datetime.date
--
converts user input/ data read from data handlers
to the appropriate type.
uses inputValidator to validate input
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>200</x>
      <y>800</y>
      <w>328</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>inputValidator.py
--
validate_input(input::string, input_type::string):boolean
validate_input_employee_id(empid::string):boolean
validate_input_gender(gender::string):boolean
validate_input_age(age::string):boolean
validate_input_bmi(bmi::string):boolean
validate_input_sales(sales::string):boolean
validate_input_salary(salary::string):boolean
validate_input_birthday(bday::string):boolean
--
validates user input based on defined rules
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>968</x>
      <y>304</y>
      <w>344</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>charts.py
--
display_statistic(statistic::{}, parameter::string, group::string)
--
displays supplied statistics in charts
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>256</x>
      <y>752</y>
      <w>240</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;..
uses to validate data before converting</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>728</x>
      <y>328</y>
      <w>256</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=&lt;..
uses to display statistics</panel_attributes>
    <additional_attributes>300.0;20.0;10.0;20.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1040</x>
      <y>584</y>
      <w>240</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;..
offers interface to all implementations</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>264</x>
      <y>928</y>
      <w>1128</w>
      <h>344</h>
    </coordinates>
    <panel_attributes>lt=&lt;..
use to validate gathered data</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;410.0;1390.0;410.0;1390.0;10.0;1350.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1336</x>
      <y>1056</y>
      <w>56</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=..</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1336</x>
      <y>1184</y>
      <w>56</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=..</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>264</x>
      <y>520</y>
      <w>352</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;..
uses to validate input for employee
creation/ updating</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0;420.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>800</x>
      <y>784</y>
      <w>184</w>
      <h>296</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
offers access to</panel_attributes>
    <additional_attributes>210.0;10.0;50.0;10.0;50.0;350.0;10.0;350.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>216</x>
      <y>144</y>
      <w>368</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>Notes:
Since some functionality of the product was realised without
using OOP, python module files are displayed as classes with
rounded corners

The project entry point is the orange-highlighted file "starter.py",
which can be called with .csv files as arguments.
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
